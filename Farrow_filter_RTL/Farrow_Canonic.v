// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\Lab3_farrow_impl\Farrow_Canonic.v
// Created: 2023-05-04 15:29:45
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 0.0001
// Target subsystem base rate: 0.0001
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        0.0001
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Out1                          ce_out        0.0001
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Farrow_Canonic
// Source Path: Lab3_farrow_impl/Farrow_Canonic
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Farrow_Canonic
          (clk,
           reset,
           clk_enable,
           In1,
           In2,
           ce_out,
           Out1);


  input   clk;
  input   reset;
  input   clk_enable;
  input   signed [15:0] In1;  // sfix16_En14
  input   [11:0] In2;  // ufix12_En8
  output  ce_out;
  output  signed [15:0] Out1;  // sfix16_En14


  wire enb;
  reg signed [15:0] Delay_out1;  // sfix16_En14
  reg signed [15:0] Delay11_out1;  // sfix16_En14
  reg signed [15:0] Delay17_out1;  // sfix16_En14
  reg signed [15:0] Delay18_out1;  // sfix16_En14
  reg signed [15:0] Delay20_out1;  // sfix16_En14
  reg signed [15:0] Delay24_out1;  // sfix16_En14
  wire signed [31:0] Gain7_mul_temp;  // sfix32_En30
  wire signed [23:0] Gain7_out1;  // sfix24_En20
  wire signed [31:0] Gain1_mul_temp;  // sfix32_En30
  wire signed [31:0] Gain1_1;  // sfix32
  wire signed [15:0] Gain1_out1;  // sfix16_En14
  wire signed [31:0] Gain3_mul_temp;  // sfix32_En31
  wire signed [23:0] Gain3_out1;  // sfix24_En20
  reg signed [23:0] Delay5_out1;  // sfix24_En20
  wire signed [24:0] Add8_add_cast;  // sfix25_En20
  wire signed [24:0] Add8_add_cast_1;  // sfix25_En20
  wire signed [24:0] Add8_out1;  // sfix25_En20
  reg signed [24:0] Delay8_out1;  // sfix25_En20
  wire signed [25:0] Add7_add_cast;  // sfix26_En20
  wire signed [25:0] Add7_add_cast_1;  // sfix26_En20
  wire signed [25:0] Add7_out1;  // sfix26_En20
  reg signed [25:0] Delay10_out1;  // sfix26_En20
  wire signed [26:0] Add6_add_cast;  // sfix27_En20
  wire signed [26:0] Add6_add_cast_1;  // sfix27_En20
  wire signed [26:0] Add6_add_temp;  // sfix27_En20
  wire signed [23:0] Add6_out1;  // sfix24_En20
  reg signed [23:0] Delay15_out1;  // sfix24_En20
  reg signed [23:0] Delay16_out1;  // sfix24_En20
  reg signed [23:0] Delay23_out1;  // sfix24_En20
  wire signed [31:0] Gain4_cast;  // sfix32_En29
  wire signed [15:0] Gain4_out1;  // sfix16_En14
  wire signed [31:0] Gain2_cast;  // sfix32_En29
  wire signed [15:0] Gain2_out1;  // sfix16_En14
  reg signed [15:0] Delay6_out1;  // sfix16_En14
  wire signed [16:0] Add11_sub_cast;  // sfix17_En14
  wire signed [16:0] Add11_sub_cast_1;  // sfix17_En14
  wire signed [16:0] Add11_out1;  // sfix17_En14
  reg signed [16:0] Delay4_out1;  // sfix17_En14
  wire signed [17:0] Add10_add_cast;  // sfix18_En14
  wire signed [17:0] Add10_add_cast_1;  // sfix18_En14
  wire signed [17:0] Add10_out1;  // sfix18_En14
  reg signed [17:0] Delay12_out1;  // sfix18_En14
  reg signed [17:0] Delay22_out1;  // sfix18_En14
  wire signed [31:0] Gain8_mul_temp;  // sfix32_En31
  wire signed [23:0] Gain8_out1;  // sfix24_En20
  wire signed [31:0] Gain6_cast;  // sfix32_En29
  wire signed [15:0] Gain6_out1;  // sfix16_En14
  wire signed [31:0] Gain10_mul_temp;  // sfix32_En30
  wire signed [31:0] Gain10_1;  // sfix32
  wire signed [15:0] Gain10_out1;  // sfix16_En14
  wire signed [31:0] Gain9_mul_temp;  // sfix32_En31
  wire signed [23:0] Gain9_out1;  // sfix24_En20
  reg signed [23:0] Delay7_out1;  // sfix24_En20
  wire signed [24:0] Add14_add_cast;  // sfix25_En20
  wire signed [24:0] Add14_add_cast_1;  // sfix25_En20
  wire signed [24:0] Add14_out1;  // sfix25_En20
  reg signed [24:0] Delay2_out1;  // sfix25_En20
  wire signed [25:0] Add13_add_cast;  // sfix26_En20
  wire signed [25:0] Add13_add_cast_1;  // sfix26_En20
  wire signed [25:0] Add13_out1;  // sfix26_En20
  reg signed [25:0] Delay3_out1;  // sfix26_En20
  wire signed [26:0] Add12_add_cast;  // sfix27_En20
  wire signed [26:0] Add12_add_cast_1;  // sfix27_En20
  wire signed [26:0] Add12_add_temp;  // sfix27_En20
  wire signed [23:0] Add12_out1;  // sfix24_En20
  reg signed [23:0] Delay21_out1;  // sfix24_En20
  reg [11:0] Delay14_out1;  // ufix12_En8
  reg [11:0] Delay25_out1;  // ufix12_En8
  wire signed [12:0] Product2_cast;  // sfix13_En8
  wire signed [36:0] Product2_mul_temp;  // sfix37_En28
  wire signed [35:0] Product2_cast_1;  // sfix36_En28
  wire signed [23:0] Product2_out1;  // sfix24_En20
  reg signed [23:0] Delay9_out1;  // sfix24_En20
  wire signed [24:0] Add5_add_cast;  // sfix25_En20
  wire signed [24:0] Add5_add_cast_1;  // sfix25_En20
  wire signed [24:0] Add5_add_temp;  // sfix25_En20
  wire signed [23:0] Add5_out1;  // sfix24_En20
  reg [11:0] Delay26_out1;  // ufix12_En8
  wire signed [12:0] Product_cast;  // sfix13_En8
  wire signed [36:0] Product_mul_temp;  // sfix37_En28
  wire signed [35:0] Product_cast_1;  // sfix36_En28
  wire signed [23:0] Product_out1;  // sfix24_En20
  reg signed [23:0] Delay13_out1;  // sfix24_En20
  wire signed [23:0] Add4_out1;  // sfix24_En20
  reg [11:0] Delay27_out1;  // ufix12_En8
  wire signed [12:0] Product1_cast;  // sfix13_En8
  wire signed [36:0] Product1_mul_temp;  // sfix37_En28
  wire signed [35:0] Product1_out1;  // sfix36_En28
  reg signed [35:0] Delay19_out1;  // sfix36_En28
  wire signed [36:0] Add3_add_cast;  // sfix37_En28
  wire signed [36:0] Add3_add_cast_1;  // sfix37_En28
  wire signed [36:0] Add3_add_temp;  // sfix37_En28
  wire signed [15:0] Add3_out1;  // sfix16_En14
  reg signed [15:0] Delay1_out1;  // sfix16_En14


  assign enb = clk_enable;

  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay_out1 <= In1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay11_process
      if (reset == 1'b1) begin
        Delay11_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay11_out1 <= Delay_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay17_process
      if (reset == 1'b1) begin
        Delay17_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay17_out1 <= Delay11_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay18_process
      if (reset == 1'b1) begin
        Delay18_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay18_out1 <= Delay17_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay20_process
      if (reset == 1'b1) begin
        Delay20_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay20_out1 <= Delay18_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay24_process
      if (reset == 1'b1) begin
        Delay24_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay24_out1 <= Delay20_out1;
        end
      end
    end



  assign Gain7_mul_temp = 16'sb1010101010101011 * Delay_out1;
  assign Gain7_out1 = ({{2{Gain7_mul_temp[31]}}, Gain7_mul_temp[31:10]}) + $signed({1'b0, Gain7_mul_temp[9] & (( ~ Gain7_mul_temp[31]) | (|Gain7_mul_temp[8:0]))});



  // CSD Encoding (32768) : 1000000000000000; Cost (Adders) = 0
  assign Gain1_1 = {Delay_out1[15], {Delay_out1, 15'b000000000000000}};
  assign Gain1_mul_temp =  - (Gain1_1);
  assign Gain1_out1 = Gain1_mul_temp[31:16] + $signed({1'b0, Gain1_mul_temp[15] & (( ~ Gain1_mul_temp[31]) | (|Gain1_mul_temp[14:0]))});



  assign Gain3_mul_temp = 16'sb1010101010101011 * Delay_out1;
  assign Gain3_out1 = ({{3{Gain3_mul_temp[31]}}, Gain3_mul_temp[31:11]}) + $signed({1'b0, Gain3_mul_temp[10] & (( ~ Gain3_mul_temp[31]) | (|Gain3_mul_temp[9:0]))});



  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= Gain3_out1;
        end
      end
    end



  assign Add8_add_cast = {{3{Delay_out1[15]}}, {Delay_out1, 6'b000000}};
  assign Add8_add_cast_1 = {Delay5_out1[23], Delay5_out1};
  assign Add8_out1 = Add8_add_cast + Add8_add_cast_1;



  always @(posedge clk or posedge reset)
    begin : Delay8_process
      if (reset == 1'b1) begin
        Delay8_out1 <= 25'sb0000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay8_out1 <= Add8_out1;
        end
      end
    end



  assign Add7_add_cast = {{4{Gain1_out1[15]}}, {Gain1_out1, 6'b000000}};
  assign Add7_add_cast_1 = {Delay8_out1[24], Delay8_out1};
  assign Add7_out1 = Add7_add_cast + Add7_add_cast_1;



  always @(posedge clk or posedge reset)
    begin : Delay10_process
      if (reset == 1'b1) begin
        Delay10_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay10_out1 <= Add7_out1;
        end
      end
    end



  assign Add6_add_cast = {{3{Gain7_out1[23]}}, Gain7_out1};
  assign Add6_add_cast_1 = {Delay10_out1[25], Delay10_out1};
  assign Add6_add_temp = Add6_add_cast + Add6_add_cast_1;
  assign Add6_out1 = Add6_add_temp[23:0];



  always @(posedge clk or posedge reset)
    begin : Delay15_process
      if (reset == 1'b1) begin
        Delay15_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay15_out1 <= Add6_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay16_process
      if (reset == 1'b1) begin
        Delay16_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay16_out1 <= Delay15_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay23_process
      if (reset == 1'b1) begin
        Delay23_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay23_out1 <= Delay16_out1;
        end
      end
    end



  assign Gain4_cast = {{2{Delay_out1[15]}}, {Delay_out1, 14'b00000000000000}};
  assign Gain4_out1 = Gain4_cast[30:15] + $signed({1'b0, Gain4_cast[14] & (( ~ Gain4_cast[31]) | (|Gain4_cast[13:0]))});



  assign Gain2_cast = {{2{Delay_out1[15]}}, {Delay_out1, 14'b00000000000000}};
  assign Gain2_out1 = Gain2_cast[30:15] + $signed({1'b0, Gain2_cast[14] & (( ~ Gain2_cast[31]) | (|Gain2_cast[13:0]))});



  always @(posedge clk or posedge reset)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay6_out1 <= Gain2_out1;
        end
      end
    end



  assign Add11_sub_cast = {Delay6_out1[15], Delay6_out1};
  assign Add11_sub_cast_1 = {Delay_out1[15], Delay_out1};
  assign Add11_out1 = Add11_sub_cast - Add11_sub_cast_1;



  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 17'sb00000000000000000;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= Add11_out1;
        end
      end
    end



  assign Add10_add_cast = {{2{Gain4_out1[15]}}, Gain4_out1};
  assign Add10_add_cast_1 = {Delay4_out1[16], Delay4_out1};
  assign Add10_out1 = Add10_add_cast + Add10_add_cast_1;



  always @(posedge clk or posedge reset)
    begin : Delay12_process
      if (reset == 1'b1) begin
        Delay12_out1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          Delay12_out1 <= Add10_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay22_process
      if (reset == 1'b1) begin
        Delay22_out1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          Delay22_out1 <= Delay12_out1;
        end
      end
    end



  assign Gain8_mul_temp = 16'sb1010101010101011 * Delay_out1;
  assign Gain8_out1 = ({{3{Gain8_mul_temp[31]}}, Gain8_mul_temp[31:11]}) + $signed({1'b0, Gain8_mul_temp[10] & (( ~ Gain8_mul_temp[31]) | (|Gain8_mul_temp[9:0]))});



  assign Gain6_cast = {{2{Delay_out1[15]}}, {Delay_out1, 14'b00000000000000}};
  assign Gain6_out1 = Gain6_cast[30:15] + $signed({1'b0, Gain6_cast[14] & (( ~ Gain6_cast[31]) | (|Gain6_cast[13:0]))});



  // CSD Encoding (32768) : 1000000000000000; Cost (Adders) = 0
  assign Gain10_1 = {Delay_out1[15], {Delay_out1, 15'b000000000000000}};
  assign Gain10_mul_temp =  - (Gain10_1);
  assign Gain10_out1 = Gain10_mul_temp[31:16] + $signed({1'b0, Gain10_mul_temp[15] & (( ~ Gain10_mul_temp[31]) | (|Gain10_mul_temp[14:0]))});



  assign Gain9_mul_temp = 16'sb0101010101010101 * Delay_out1;
  assign Gain9_out1 = ({{3{Gain9_mul_temp[31]}}, Gain9_mul_temp[31:11]}) + $signed({1'b0, Gain9_mul_temp[10] & (( ~ Gain9_mul_temp[31]) | (|Gain9_mul_temp[9:0]))});



  always @(posedge clk or posedge reset)
    begin : Delay7_process
      if (reset == 1'b1) begin
        Delay7_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay7_out1 <= Gain9_out1;
        end
      end
    end



  assign Add14_add_cast = {{3{Gain10_out1[15]}}, {Gain10_out1, 6'b000000}};
  assign Add14_add_cast_1 = {Delay7_out1[23], Delay7_out1};
  assign Add14_out1 = Add14_add_cast + Add14_add_cast_1;



  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 25'sb0000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Add14_out1;
        end
      end
    end



  assign Add13_add_cast = {{4{Gain6_out1[15]}}, {Gain6_out1, 6'b000000}};
  assign Add13_add_cast_1 = {Delay2_out1[24], Delay2_out1};
  assign Add13_out1 = Add13_add_cast + Add13_add_cast_1;



  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= Add13_out1;
        end
      end
    end



  assign Add12_add_cast = {{3{Gain8_out1[23]}}, Gain8_out1};
  assign Add12_add_cast_1 = {Delay3_out1[25], Delay3_out1};
  assign Add12_add_temp = Add12_add_cast + Add12_add_cast_1;
  assign Add12_out1 = Add12_add_temp[23:0];



  always @(posedge clk or posedge reset)
    begin : Delay21_process
      if (reset == 1'b1) begin
        Delay21_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay21_out1 <= Add12_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay14_process
      if (reset == 1'b1) begin
        Delay14_out1 <= 12'b000000000000;
      end
      else begin
        if (enb) begin
          Delay14_out1 <= In2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay25_process
      if (reset == 1'b1) begin
        Delay25_out1 <= 12'b000000000000;
      end
      else begin
        if (enb) begin
          Delay25_out1 <= Delay14_out1;
        end
      end
    end



  assign Product2_cast = {1'b0, Delay25_out1};
  assign Product2_mul_temp = Delay21_out1 * Product2_cast;
  assign Product2_cast_1 = Product2_mul_temp[35:0];
  assign Product2_out1 = Product2_cast_1[31:8] + $signed({1'b0, Product2_cast_1[7] & (( ~ Product2_cast_1[35]) | (|Product2_cast_1[6:0]))});



  always @(posedge clk or posedge reset)
    begin : Delay9_process
      if (reset == 1'b1) begin
        Delay9_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay9_out1 <= Product2_out1;
        end
      end
    end



  assign Add5_add_cast = {Delay22_out1[17], {Delay22_out1, 6'b000000}};
  assign Add5_add_cast_1 = {Delay9_out1[23], Delay9_out1};
  assign Add5_add_temp = Add5_add_cast + Add5_add_cast_1;
  assign Add5_out1 = Add5_add_temp[23:0];



  always @(posedge clk or posedge reset)
    begin : Delay26_process
      if (reset == 1'b1) begin
        Delay26_out1 <= 12'b000000000000;
      end
      else begin
        if (enb) begin
          Delay26_out1 <= Delay25_out1;
        end
      end
    end



  assign Product_cast = {1'b0, Delay26_out1};
  assign Product_mul_temp = Add5_out1 * Product_cast;
  assign Product_cast_1 = Product_mul_temp[35:0];
  assign Product_out1 = Product_cast_1[31:8] + $signed({1'b0, Product_cast_1[7] & (( ~ Product_cast_1[35]) | (|Product_cast_1[6:0]))});



  always @(posedge clk or posedge reset)
    begin : Delay13_process
      if (reset == 1'b1) begin
        Delay13_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay13_out1 <= Product_out1;
        end
      end
    end



  assign Add4_out1 = Delay23_out1 + Delay13_out1;



  always @(posedge clk or posedge reset)
    begin : Delay27_process
      if (reset == 1'b1) begin
        Delay27_out1 <= 12'b000000000000;
      end
      else begin
        if (enb) begin
          Delay27_out1 <= Delay26_out1;
        end
      end
    end



  assign Product1_cast = {1'b0, Delay27_out1};
  assign Product1_mul_temp = Add4_out1 * Product1_cast;
  assign Product1_out1 = Product1_mul_temp[35:0];



  always @(posedge clk or posedge reset)
    begin : Delay19_process
      if (reset == 1'b1) begin
        Delay19_out1 <= 36'sh000000000;
      end
      else begin
        if (enb) begin
          Delay19_out1 <= Product1_out1;
        end
      end
    end



  assign Add3_add_cast = {{7{Delay24_out1[15]}}, {Delay24_out1, 14'b00000000000000}};
  assign Add3_add_cast_1 = {Delay19_out1[35], Delay19_out1};
  assign Add3_add_temp = Add3_add_cast + Add3_add_cast_1;
  assign Add3_out1 = Add3_add_temp[29:14] + $signed({1'b0, Add3_add_temp[13] & (( ~ Add3_add_temp[36]) | (|Add3_add_temp[12:0]))});



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Add3_out1;
        end
      end
    end



  assign Out1 = Delay1_out1;

  assign ce_out = clk_enable;

endmodule  // Farrow_Canonic

